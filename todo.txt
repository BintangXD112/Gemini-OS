
# Gemini OS - Future Updates & TODO List

This file tracks potential features, improvements, and bug fixes for the Gemini OS project.

## High Priority / Core Features
- [x] **Multi-Window Support**:
  - [x] Allow multiple applications to be open in different windows simultaneously.
  - [x] Implement a z-index management system to handle window focus.
  - [x] Add a taskbar or dock to show and manage open applications.

- [x] **Window Management**:
  - [x] Make windows resizable from their corners/edges.
  - [x] Add minimize and maximize buttons to the window title bar.

- [ ] **File System Simulation**:
  - [x] Implement file system service with localStorage persistence.
  - [ ] Implement saving functionality in the Notepad app.
  - [ ] Allow creating/deleting files in the "Documents" app.
  - [ ] Make the "Trash Bin" functional (restore/permanently delete files).
  - [x] Persist file system state across sessions (using localStorage).

## UI/UX Enhancements
- [x] **Theming**:
  - [x] Implement a dark/light mode toggle in Settings.
  - [x] Instruct the LLM to respect the current theme when generating UI.
  - [x] Add CSS variables for theme support.

- [ ] **Desktop Customization**:
  - [ ] Allow changing the desktop wallpaper via the "Settings" app.
  - [ ] Let users rearrange icons on the desktop.

- [x] **Accessibility Improvements**:
  - [x] Add keyboard navigation for all UI elements, including window management.
  - [x] Add focus styles and ARIA attributes.
  - [x] Support for reduced motion preferences.
  - [ ] Conduct a full a11y audit.
  - [ ] Ensure all LLM-generated content consistently uses proper ARIA attributes.

## New Applications
- [x] **Email Client**: A simple app to read/write mock emails.
- [x] **Music Player**: An app that can play a list of predefined (or user-provided) audio tracks.
- [x] **Calendar/Scheduler**: A basic calendar app to view dates and add events.

## Performance & Architecture
- [x] **State Management Refinement**:
  - [x] Optimize the statefulness/caching logic for better performance with complex app states.
  - [x] Implement multi-window state management.
  - [ ] Consider a more robust state management library if the app complexity grows.

- [ ] **Code Quality & Testing**:
  - [ ] Add unit tests for key components and services (e.g., `geminiService`).
  - [ ] Implement end-to-end tests using a framework like Playwright or Cypress.
  - [ ] Add more comprehensive error boundaries in React components.

- [ ] **Streaming UX**:
  - [ ] Improve the visual feedback for streaming content to make it feel more fluid.
  - [ ] Show a more detailed loading state that perhaps hints at what is being generated.

## Recently Completed Features
- [x] **Multi-Window System**: Complete implementation with taskbar, window management, and z-index handling.
- [x] **Theme System**: Light/dark mode with CSS variables and smooth transitions.
- [x] **File System Service**: Basic file system with localStorage persistence.
- [x] **Enhanced Window Controls**: Minimize, maximize, resize, and close functionality.
- [x] **New Applications**: Email, Music, and Calendar apps added to the system.
- [x] **Improved Accessibility**: Keyboard navigation, focus management, and ARIA support.

## Next Priority Items
- [ ] **File System Integration**: Connect the file system service with the Documents, Notepad, and Trash Bin apps.
- [ ] **Enhanced Settings**: Add wallpaper customization and desktop icon arrangement.
- [ ] **Testing Infrastructure**: Set up unit and integration tests.
- [ ] **Performance Optimization**: Implement virtual scrolling for large file lists and optimize rendering.
- [ ] **Error Handling**: Add comprehensive error boundaries and user-friendly error messages.
